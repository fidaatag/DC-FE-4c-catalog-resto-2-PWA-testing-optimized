{"version":3,"file":"app~7bd12dde.bundle.js","mappings":";0YACA,8lGAAAA,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,kkBAEA,IAAOC,EAAsDC,EAAAA,EAAAA,cAAvCC,EAAuCD,EAAAA,EAAAA,iBAArBE,EAAqBF,EAAAA,EAAAA,kBAEvDG,GAAYC,EAAAA,EAAAA,IAAOL,EAAeE,EAAkB,CACxDI,QAAO,SAACC,GACNA,EAASC,kBAAkBL,EAAmB,CAACM,QAAS,MAC1D,IA+BF,QA5ByB,CACjBC,SAAQ,SAACC,GAAI,oGAEbA,EAAI,CAAF,gEAIQP,EAAS,uCAAEQ,IAAIT,EAAmBQ,IAAE,0CANjC,EAOnB,EAEME,YAAW,WAAG,iHACJT,EAAS,uCAAEU,OAAOX,IAAiB,0CAD/B,EAEpB,EAEMY,SAAQ,SAACC,GAAO,oGAEhBA,EAAMC,eAAe,MAAO,CAAF,gEAIhBb,EAAS,uCAAEc,IAAIf,EAAmBa,IAAK,0CANjC,EAOtB,EAEMG,YAAW,SAACR,GAAI,iHACNP,EAAS,8CAASD,EAAmBQ,IAAE,0CADjC,EAEtB,gDC5BF,QANqB,CACnBS,UAAW,GAAF,OAAKnB,EAAAA,EAAAA,SAAe,QAC7BoB,OAAQ,SAACV,GAAE,gBAAQV,EAAAA,EAAAA,SAAe,kBAAUU,EAAE,EAC9CW,WAAY,GAAF,OAAKrB,EAAAA,EAAAA,SAAe,8PCJhC,ysOAyCA,QAvCoB,yBAFpB,4FAEoB,SAFpB,UA2BE,EAXA,EAZA,EAkCC,OAtCH,EAEoB,EAFpB,EAEoB,KAFpB,EAEoB,wBAElB,cACA,+GAE2BsB,MAAMC,EAAAA,WAAuB,OAAtC,OAARC,EAAW,EAAH,cACWA,EAASC,OAAM,OAAxB,OAAVC,EAAa,EAAH,uBACTA,EAAWC,aAAW,kCAG7BC,QAAQC,IAAI,sCAAsC,0DAErD,6CAED,wCACA,WAAyBnB,GAAE,gGAEAY,MAAMC,EAAAA,OAAoBb,IAAI,OAAvC,OAARc,EAAW,EAAH,uBACPA,EAASC,QAAM,gCAGtBG,QAAQC,IAAI,wCAAwC,yDAEvD,8CAED,sCACA,WAAuBC,GAAI,uFACFR,MAAMC,EAAAA,WAAyB,CACpDQ,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAGlBC,KAAMC,KAAKC,UAAUL,KACrB,OAPY,OAARN,EAAW,EAAH,uBAQPA,EAASC,QAAM,2CACvB,+CAtCH,iFAsCG,EApCiB,mCCUpB,QAbe,CAEbW,SAAU,uCACVC,eAAgB,qDAChBC,iBAAkB,oDAClBC,iBAAkB,QAElBC,WAAY,mBACZzC,cAAe,2BACfE,iBAAkB,EAClBC,kBAAmB,4DCFfuC,gBAAM,IAAIC,EAAAA,EAAI,CAClBC,UAAWC,SAASC,cAAc,cAClCC,KAAMF,SAASC,cAAc,SAC7BE,UAAWH,SAASC,cAAc,iBAGpCG,OAAOC,iBAAiB,cAAc,WACpCR,EAAIS,YACN,IAEAF,OAAOC,iBAAiB,QAAQ,WAC9BR,EAAIS,cACJC,EAAAA,EAAAA,IACF","sources":["webpack://catalog-resto-3/./src/scripts/data/favorite-resto-idb.js","webpack://catalog-resto-3/./src/scripts/globals/api-endpoint.js","webpack://catalog-resto-3/./src/scripts/data/theresto-source.js","webpack://catalog-resto-3/./src/scripts/globals/config.js","webpack://catalog-resto-3/./src/scripts/index.js"],"sourcesContent":["import {openDB} from 'idb';\r\nimport CONFIG from '../globals/config';\r\n\r\nconst {DATABASE_NAME, DATABASE_VERSION, OBJECT_STORE_NAME} = CONFIG;\r\n\r\nconst dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, {\r\n  upgrade(database) {\r\n    database.createObjectStore(OBJECT_STORE_NAME, {keyPath: 'id'});\r\n  },\r\n});\r\n\r\nconst FavoriteRestoIdb = {\r\n  async getResto(id) {\r\n    // eslint-disable-next-line keyword-spacing\r\n    if(!id) {\r\n      return;\r\n    }\r\n\r\n    return (await dbPromise).get(OBJECT_STORE_NAME, id);\r\n  },\r\n\r\n  async getAllResto() {\r\n    return (await dbPromise).getAll(OBJECT_STORE_NAME);\r\n  },\r\n\r\n  async putResto(resto) {\r\n    // eslint-disable-next-line keyword-spacing\r\n    if(!resto.hasOwnProperty('id')) {\r\n      return;\r\n    }\r\n\r\n    return (await dbPromise).put(OBJECT_STORE_NAME, resto);\r\n  },\r\n\r\n  async deleteResto(id) {\r\n    return (await dbPromise).delete(OBJECT_STORE_NAME, id);\r\n  },\r\n};\r\n\r\nexport default FavoriteRestoIdb;\r\n","import CONFIG from './config';\r\n\r\nconst API_ENDPOINT = {\r\n  ALL_RESTO: `${CONFIG.BASE_URL}list`,\r\n  DETAIL: (id) => `${CONFIG.BASE_URL}detail/${id}`,\r\n  ADD_REVIEW: `${CONFIG.BASE_URL}review`,\r\n};\r\n\r\nexport default API_ENDPOINT;\r\n","import API_ENDPOINT from '../globals/api-endpoint';\r\n// import CONFIG from '../globals/config';\r\n\r\nclass TheRestoSource {\r\n\r\n  // fetch to get all resto\r\n  static async allResto() {\r\n    try {\r\n      const response = await fetch(API_ENDPOINT.ALL_RESTO);\r\n      const responJson = await response.json();\r\n      return responJson.restaurants;\r\n\r\n    } catch (error) {\r\n      console.log('The restaurant list failed to load');\r\n    }\r\n  }\r\n\r\n  // fetch to get detail resto\r\n  static async detailResto(id) {\r\n    try {\r\n      const response = await fetch(API_ENDPOINT.DETAIL(id));\r\n      return response.json();\r\n\r\n    } catch (error) {\r\n      console.log('The restaurant detail failed to load');\r\n    }\r\n  }\r\n\r\n  // fetch to post review resto\r\n  static async addReview(data) {\r\n    const response = await fetch(API_ENDPOINT.ADD_REVIEW, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        // 'X-Auth-Token': CONFIG.KEY,\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n    return response.json();\r\n  }\r\n}\r\n\r\nexport default TheRestoSource;\r\n","const CONFIG = {\r\n  // KEY: '12345',\r\n  BASE_URL: 'https://restaurant-api.dicoding.dev/',\r\n  BASE_IMAGE_URL: 'https://restaurant-api.dicoding.dev/images/medium/',\r\n  BASE_IMAGE_URL_S: 'https://restaurant-api.dicoding.dev/images/small/',\r\n  DEFAULT_LANGUAGE: 'en-us',\r\n  // CACHE_NAME: new Date().toISOString(), // dinamis\r\n  CACHE_NAME: 'Resto-Catalog-v1',\r\n  DATABASE_NAME: 'resto-catalogue-database',\r\n  DATABASE_VERSION: 1,\r\n  OBJECT_STORE_NAME: 'resto',\r\n};\r\n\r\nexport default CONFIG;\r\n","/* eslint-disable no-unused-vars */\r\nimport 'regenerator-runtime';\r\nimport '../styles/style.css';\r\nimport App from './views/app';\r\nimport swRegister from './utils/sw-register';\r\nimport 'lazysizes';\r\nimport 'lazysizes/plugins/parent-fit/ls.parent-fit';\r\n\r\nconst app = new App({\r\n  BtnBurger: document.querySelector('#hamburger'),\r\n  menu: document.querySelector('#menu'),\r\n  ShowResto: document.querySelector('#showresto'),\r\n});\r\n\r\nwindow.addEventListener('hashchange', () => {\r\n  app.renderPage();\r\n});\r\n\r\nwindow.addEventListener('load', () => {\r\n  app.renderPage();\r\n  swRegister();\r\n});\r\n"],"names":["i","DATABASE_NAME","CONFIG","DATABASE_VERSION","OBJECT_STORE_NAME","dbPromise","openDB","upgrade","database","createObjectStore","keyPath","getResto","id","get","getAllResto","getAll","putResto","resto","hasOwnProperty","put","deleteResto","ALL_RESTO","DETAIL","ADD_REVIEW","fetch","API_ENDPOINT","response","json","responJson","restaurants","console","log","data","method","headers","body","JSON","stringify","BASE_URL","BASE_IMAGE_URL","BASE_IMAGE_URL_S","DEFAULT_LANGUAGE","CACHE_NAME","app","App","BtnBurger","document","querySelector","menu","ShowResto","window","addEventListener","renderPage","swRegister"],"sourceRoot":""}